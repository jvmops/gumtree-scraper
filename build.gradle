plugins {
	id 'org.springframework.boot' version '2.2.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'jacoco'
	id "io.freefair.lombok" version "5.0.0-rc4"
}

group = 'com.jvmops'
version = '1.0.1'
sourceCompatibility = JavaVersion.VERSION_13
libsDirName = 'app'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	jsoupVersion = '1.12.1'
	testcontainersVersion = '1.12.5'
}

dependencies {
	implementation 'javax.validation:validation-api'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity4:3.0.4.RELEASE'
	implementation "org.jsoup:jsoup:$jsoupVersion"

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation "org.testcontainers:testcontainers:$testcontainersVersion"
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'
}

bootJar {
	archiveFileName = "gumtree-scrapper.jar"
}

/**
 * Test configuration
 */

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
	toolVersion = "0.8.5"
	reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination file("${buildDir}/jacocoHtml")
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.6
			}
		}
	}
}

check.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html
test {
	testLogging.showStandardStreams = false // extensive docker and spring logging

	afterSuite { desc, result ->
		if (!desc.parent)
			println("${result.resultType} " +
					"(${result.testCount} tests, " +
					"${result.successfulTestCount} successes, " +
					"${result.failedTestCount} failures, " +
					"${result.skippedTestCount} skipped)")
	}

	// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.logging.TestLoggingContainer.html
	testLogging {
		events "passed", "skipped", "failed"
	}

	useJUnitPlatform()
}
